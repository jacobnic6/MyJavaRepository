import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.Random;
/**  
* Nicholas Jacobs - ndjacobs2  
* CIS171 <11232>
* Sep 13, 2023  
*/
public class GamePanel extends JPanel implements ActionListener{
	
	//game screen and how fast snake goes
	static final int SCREEN_WIDTH = 600;
	static final int SCREEN_HEIGHT = 600;
	static final int UNIT_SIZE = 25;
	static final int GAME_UNITS = (SCREEN_WIDTH*SCREEN_HEIGHT)/UNIT_SIZE;
	static final int DELAY = 75;
	//Arrays for coordinates of bodyparts and head of snake
	final int x[] = new int[GAME_UNITS];//x coords
	final int y[] = new int[GAME_UNITS];//y coords
	ImageIcon hotdog = new ImageIcon("hotDog.png");
	final int HDWIDTH = hotdog.getIconWidth();
	final int HDHEIGHT = hotdog.getIconHeight();
	int bodyParts = 6; // bodyparts snake starts with
	int applesEaten;
	int appleX;//location of apples
	int appleY;
	char direction = 'R'; // starting Direction
	boolean running = false;
	Timer timer;
	Random random;
	
	//constructor
	GamePanel(){
		random = new Random();
		this.setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(new MyKeyAdapter());
		startGame();//call start after game has been constructed
	}
	
	//methods for the game
	public void startGame() {
		newApple();
		running = true;
		timer = new Timer(DELAY,this);
		timer.start();
	}
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		hotdog.paintIcon(this, g, appleX, appleY);
		draw(g);
	}
	public void draw(Graphics g) {
		
			
		if(running) {
			//loop to turn screen into a grid
			
			/*
			 * for(int i=0; i<SCREEN_HEIGHT/UNIT_SIZE;i++) { g.drawLine(i*UNIT_SIZE, 0,
			 * i*UNIT_SIZE, SCREEN_HEIGHT); g.drawLine(0, i*UNIT_SIZE, SCREEN_WIDTH,
			 * i*UNIT_SIZE);//lines along x and y based on size of objects in game UNIT_SIZE
			 * }
			 */
			
			
			//hotdog = new Image getScaledInstance(int width, int height, int hints);
			//ImageIcon h = new ImageIcon("hotDog.png");
			 	//h.setImage(hotdog);
			 	//g.drawImage(null, g, appleX, appleY);
			g.setColor(Color.red);//draw apple
			g.fillOval(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
			g.fillRect(appleX, appleY, UNIT_SIZE, UNIT_SIZE);
			
			//for loop to paint all parts of snake and the screen snake isn't on
			for(int i = 0; i< bodyParts;i++) {
				if(i == 0) {//paints the grass snake isn't on
					g.setColor(Color.green);
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
				else {//paints the snake
					g.setColor(new Color(45,180,0));
					//g.setColor(new Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));//makes snake color random
					g.fillRect(x[i], y[i], UNIT_SIZE, UNIT_SIZE);
				}
			}
		//displaying score during the game
			g.setColor(Color.red);
			g.setFont( new Font("Ink Free", Font.BOLD, 40));
			//font metrics for lining up text on center of screen
			FontMetrics metrics = getFontMetrics(g.getFont());//getting the metrics of our font
			g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics.stringWidth("Score: " + applesEaten))/2, g.getFont().getSize());//taking metrics from above subtracted 
		}
		else {
			gameOver(g);
		}
	}
	
	public void newApple() {
		appleX = random.nextInt((int)(SCREEN_WIDTH/UNIT_SIZE))*UNIT_SIZE;
		appleY = random.nextInt((int)(SCREEN_HEIGHT/UNIT_SIZE))*UNIT_SIZE;
		repaint();
	}
	
	public void move() {
		//for loop for all of the snake body parts
		for(int i = bodyParts;i>0;i--) {
			x[i] = x[i-1]; //taking array of body part coordinates and moving by 1
			y[i] = y[i-1];
		}
		//switch to change direction of snake
		switch(direction) {
		case 'U':
			y[0]=y[0] - UNIT_SIZE;
			break;
		case 'D':
			y[0]=y[0] + UNIT_SIZE;
			break;
		case 'L':
			x[0]=x[0] - UNIT_SIZE;
			break;
		case 'R':
			x[0]=x[0] + UNIT_SIZE;
			break;
		}
	}
	public void checkApple() {
		//examine coords of snake and apple to see if snake went over it
		if((x[0]== appleX) && (y[0]== appleY)){
			bodyParts++;						//grow snake
			applesEaten++;						//keep score
			newApple();							//calls method to get a new apple
		}
	}
	public void checkCollisions() {
		
		//see if snake collides with itself
		for(int i = bodyParts;i>0;i--) {
			if((x[0] == x[i])&& (y[0]==y[i])) {//if true head collided with body
				running = false;
			}	
		}
		//check if head touches left border
		if(x[0]< 0) {
			running = false;
		}
		//check if head touches right border
		if(x[0]> SCREEN_WIDTH) {
			running = false;
		}
		//check if head touches top border
		if(y[0]< 0) {
			running = false;
		}
		
		//check if head touches bottom border
		if(y[0]> SCREEN_HEIGHT) {
			running = false;
		}
		
		if(!running) {
			timer.stop();
		}	
	}
	public void gameOver(Graphics g) {
		//Game Over text
		g.setColor(Color.red);
		g.setFont( new Font("Ink Free", Font.BOLD, 75));
		//font metrics for lining up text on center of screen
		FontMetrics metrics1 = getFontMetrics(g.getFont());//getting the metrics of our font
		g.drawString("Game Over", (SCREEN_WIDTH - metrics1.stringWidth("Game Over"))/2, SCREEN_HEIGHT/2);//taking metrics from above subtracted 																									
																										//from the width of the screen/2 to put them in the middle
		//displaying score on game over screen
		g.setColor(Color.red);
		g.setFont( new Font("Ink Free", Font.BOLD, 40));
		//font metrics for lining up text on center of screen
		FontMetrics metrics2 = getFontMetrics(g.getFont());//getting the metrics of our font
		g.drawString("Score: " + applesEaten, (SCREEN_WIDTH - metrics2.stringWidth("Score: " + applesEaten))/2, g.getFont().getSize());//taking metrics from above subtracted
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		if(running) {
			move();
			checkApple();
			checkCollisions();
		}
		repaint();	
	}
	public class MyKeyAdapter extends KeyAdapter{
		@Override
		public void keyPressed(KeyEvent e) {
			switch(e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if(direction != 'R') {//If not going right, allows snake to go left
					direction = 'L';
				}
				break;	
			case KeyEvent.VK_RIGHT:
				if(direction != 'L') {//if not going left can go right
					direction = 'R';
				}
				break;
			case KeyEvent.VK_UP:
				if(direction != 'D') {//if not going down can go up
					direction = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if(direction != 'U') {//if not going up can go down
					direction = 'D';
				}
				break;
			}
		}
	}

}
